package back


//你和你的朋友，两个人一起玩Nim 游戏：
//
//桌子上有一堆石头。
//你们轮流进行自己的回合，你作为先手。
//每一回合，轮到的人拿掉1 - 3 块石头。
//拿掉最后一块石头的人就是获胜者。
//假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false
//输入：n = 4
//输出：false
//解释：如果堆中有 4 块石头，那么你永远不会赢得比赛；
//因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
//动态规划法
func canWinNim(n int) bool {
	if n<4{
		return true
	}
	return !canWinNim(n-1)||!canWinNim(n-2)||!canWinNim(n-3)
}

//猜数字游戏的规则如下：
//
//每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。
//如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。
//你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：
//
//-1：我选出的数字比你猜的数字小 pick < num
//1：我选出的数字比你猜的数字大 pick > num
//0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num

//题目的意思是guess(n) 函数返回和传入的数的比较
//简单二分查找法
func guess(num int) int{
	return 0
}
func guessNumber(n int) int {

	l,r:=0,n
	for l<r{
		mid:=(l+r)//2
		if guess(mid)==1{
			r=mid-1
		}else{
			l=mid+1
		}
	}
	return l
}